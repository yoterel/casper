#version 330 core
uniform sampler2D u_input_texture;
uniform vec2 u_direction;

in vec2 texcoord;
out vec4 FragColor;

const int M = 1;
const int N = 2 * M + 1;

// sigma = 10, blur radius = 16
// const float coeffs[N] = float[N](
// 	0.012318109844189502,
// 	0.014381474814203989,
// 	0.016623532195728208,
// 	0.019024086115486723,
// 	0.02155484948872149,
// 	0.02417948052890078,
// 	0.02685404941667096,
// 	0.0295279624870386,
// 	0.03214534135442581,
// 	0.03464682117793548,
// 	0.0369716985390341,
// 	0.039060328279673276,
// 	0.040856643282313365,
// 	0.04231065439216247,
// 	0.043380781642569775,
// 	0.044035873841196206,
// 	0.04425662519949865,
// 	0.044035873841196206,
// 	0.043380781642569775,
// 	0.04231065439216247,
// 	0.040856643282313365,
// 	0.039060328279673276,
// 	0.0369716985390341,
// 	0.03464682117793548,
// 	0.03214534135442581,
// 	0.0295279624870386,
// 	0.02685404941667096,
// 	0.02417948052890078,
// 	0.02155484948872149,
// 	0.019024086115486723,
// 	0.016623532195728208,
// 	0.014381474814203989,
// 	0.012318109844189502
// );

// sigma = 10, blur radius = 3
const float coeffs[N] = float[N](
    0.39899895455317014,
    0.4029965984990843,
    0.19800444694774558
);
void main()
{
  vec4 sum = vec4(0.0);

  for (int i = 0; i < N; ++i)
  {
    vec2 tc = texcoord + u_direction * float(i - M);
    sum += coeffs[i] * texture(u_input_texture, tc);
  }

  FragColor = sum;
}